plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.0-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.sonarqube' version "4.0.0.2929"
	id "jacoco"
}

group = 'com.realtime'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

jacoco {
	toolVersion = "0.8.9"
}


repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
//	implementation 'org.springframework.boot:spring-boot-starter-batch'
//	implementation 'org.springframework.boot:spring-boot-starter-cache'
//	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.fasterxml.jackson:jackson-bom'
//	implementation 'org.springframework.boot:spring-boot-starter-data-ldap'
//	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
//	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
//	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
//	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.security:spring-security-oauth2-authorization-server:1.0.2'
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
//	implementation 'org.apache.kafka:kafka-streams'
//	implementation 'org.springframework.kafka:spring-kafka'
//	implementation 'org.springframework.session:spring-session-data-redis'
	implementation 'io.debezium:debezium-embedded:1.4.2.Final'
	implementation 'io.debezium:debezium-api:1.4.2.Final'
	implementation 'io.debezium:debezium-connector-postgres:1.4.2.Final'
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'org.postgresql:postgresql'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.graphql:spring-graphql-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	reports {
		xml.enabled(true)
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}

sonar {
	properties {
		property "sonar.java.coveragePlugin", "jacoco"
		property "sonar.projectKey", "project"
		property "sonar.projectName", "project"
		property "sonar.coverage.jacoco.xmlReportPath", "${buildDir}/reports/jacoco.xml"
	}
}


